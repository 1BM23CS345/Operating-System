#include <stdio.h>
#include <stdbool.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void sortByArrivalAndBurst(int n, int pid[], int at[], int bt[]) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (at[j] > at[j + 1] || (at[j] == at[j + 1] && bt[j] > bt[j + 1])) {
                swap(&pid[j], &pid[j + 1]);
                swap(&at[j], &at[j + 1]);
                swap(&bt[j], &bt[j + 1]);
            }
        }
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    int pid[n], at[n], bt[n], wt[n], tat[n], ct[n];
    bool completed[n];
    
    for (int i = 0; i < n; i++) {
        pid[i] = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &at[i]);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &bt[i]);
        completed[i] = false;
    }
    
    sortByArrivalAndBurst(n, pid, at, bt);
    
    int currentTime = 0, completedProcesses = 0;
    
    while (completedProcesses < n) {
        int shortestIndex = -1;
        int minBurst = 10000;
        
        for (int i = 0; i < n; i++) {
            if (!completed[i] && at[i] <= currentTime && bt[i] < minBurst) {
                minBurst = bt[i];
                shortestIndex = i;
            }
        }
        
        if (shortestIndex == -1) {
            currentTime++;
        } else {
            ct[shortestIndex] = currentTime + bt[shortestIndex];
            tat[shortestIndex] = ct[shortestIndex] - at[shortestIndex];
            wt[shortestIndex] = tat[shortestIndex] - bt[shortestIndex];
            currentTime = ct[shortestIndex];
            completed[shortestIndex] = true;
            completedProcesses++;
        }
    }
    
    printf("\nProcess ID\tArrival Time\tBurst Time\tCompletion Time\tWaiting Time\tTurnaround Time\n");
    float avg_wt = 0, avg_tat = 0;
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", pid[i], at[i], bt[i], ct[i], wt[i], tat[i]);
        avg_wt += wt[i];
        avg_tat += tat[i];
    }
    printf("\nAverage Waiting Time: %.2f", avg_wt / n);
    printf("\nAverage Turnaround Time: %.2f\n", avg_tat / n);
    
    return 0;
}
