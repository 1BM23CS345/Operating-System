#include <stdio.h>
#include <stdlib.h>

#define MAX_PAGES 10

// Function to find the page index that is to be replaced in FIFO
void fifo(int pages[], int n, int frame_size) {
    int frames[frame_size];
    int page_faults = 0, i, j, k, flag;

    // Initializing frames to -1 (empty)
    for(i = 0; i < frame_size; i++) {
        frames[i] = -1;
    }

    for(i = 0; i < n; i++) {
        flag = 0;

        // Check if the page is already in the frames
        for(j = 0; j < frame_size; j++) {
            if(frames[j] == pages[i]) {
                flag = 1;
                break;
            }
        }

        // If the page is not in the frames, it's a page fault
        if(flag == 0) {
            page_faults++;

            // Replace the first empty slot or replace the first inserted page (FIFO)
            for(k = 0; k < frame_size - 1; k++) {
                frames[k] = frames[k + 1];
            }
            frames[k] = pages[i];
        }

        // Display the frames after each page reference
        printf("Reference string: ");
        for(k = 0; k < frame_size; k++) {
            if(frames[k] != -1) {
                printf("%d ", frames[k]);
            }
        }
        printf("\n");
    }

    printf("\nTotal page faults: %d\n", page_faults);
}

// Function to find the page index to replace using LRU
void lru(int pages[], int n, int frame_size) {
    int frames[frame_size], age[frame_size];
    int page_faults = 0, i, j, k, flag, oldest, min_age;

    // Initializing frames to -1 (empty)
    for(i = 0; i < frame_size; i++) {
        frames[i] = -1;
        age[i] = 0;
    }

    for(i = 0; i < n; i++) {
        flag = 0;

        // Check if the page is already in the frames
        for(j = 0; j < frame_size; j++) {
            if(frames[j] == pages[i]) {
                flag = 1;
                age[j] = 0; // Reset age for the page found
                break;
            }
        }

        // If the page is not in the frames, it's a page fault
        if(flag == 0) {
            page_faults++;

            // Find the page with the oldest age to replace
            oldest = 0;
            min_age = age[0];
            for(k = 1; k < frame_size; k++) {
                if(age[k] > min_age) {
                    min_age = age[k];
                    oldest = k;
                }
            }

            // Replace the oldest page
            frames[oldest] = pages[i];
            age[oldest] = 0; // Reset age of the newly added page
        }

        // Update the age of all pages
        for(k = 0; k < frame_size; k++) {
            if(frames[k] != -1 && frames[k] != pages[i]) {
                age[k]++;
            }
        }

        // Display the frames after each page reference
        printf("Reference string: ");
        for(k = 0; k < frame_size; k++) {
            if(frames[k] != -1) {
                printf("%d ", frames[k]);
            }
        }
        printf("\n");
    }

    printf("\nTotal page faults: %d\n", page_faults);
}

// Function to find the page index to replace using Optimal
int optimal(int pages[], int n, int frames[], int i, int frame_size) {
    int farthest = -1, replace_index = -1;
    for(int j = 0; j < frame_size; j++) {
        int found = 0;
        for(int k = i + 1; k < n; k++) {
            if(pages[k] == frames[j]) {
                found = 1;
                if(k > farthest) {
                    farthest = k;
                    replace_index = j;
                }
                break;
            }
        }
        if(!found) {
            return j;
        }
    }
    return replace_index;
}

void optimal(int pages[], int n, int frame_size) {
    int frames[frame_size];
    int page_faults = 0, i, j, k, flag;

    // Initializing frames to -1 (empty)
    for(i = 0; i < frame_size; i++) {
        frames[i] = -1;
    }

    for(i = 0; i < n; i++) {
        flag = 0;

        // Check if the page is already in the frames
        for(j = 0; j < frame_size; j++) {
            if(frames[j] == pages[i]) {
                flag = 1;
                break;
            }
        }

        // If the page is not in the frames, it's a page fault
        if(flag == 0) {
            page_faults++;

            // If there's space in the frames, just place the page in the first empty slot
            int replace_index = -1;
            for(k = 0; k < frame_size; k++) {
                if(frames[k] == -1) {
                    replace_index = k;
                    break;
                }
            }

            // If no empty space, apply optimal replacement strategy
            if(replace_index == -1) {
                replace_index = optimal(pages, n, frames, i, frame_size);
            }

            frames[replace_index] = pages[i];
        }

        // Display the frames after each page reference
        printf("Reference string: ");
        for(k = 0; k < frame_size; k++) {
            if(frames[k] != -1) {
                printf("%d ", frames[k]);
            }
        }
        printf("\n");
    }

    printf("\nTotal page faults: %d\n", page_faults);
}

int main() {
    int pages[MAX_PAGES];
    int n, frame_size, choice;

    printf("Enter the number of pages: ");
    scanf("%d", &n);

    printf("Enter the page reference string: ");
    for(int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter the number of frames: ");
    scanf("%d", &frame_size);

    printf("\nChoose the page replacement algorithm:\n");
    printf("1. FIFO\n");
    printf("2. LRU\n");
    printf("3. Optimal\n");
    printf("Enter choice: ");
    scanf("%d", &choice);

    switch(choice) {
        case 1:
            printf("\nRunning FIFO...\n");
            fifo(pages, n, frame_size);
            break;
        case 2:
            printf("\nRunning LRU...\n");
            lru(pages, n, frame_size);
            break;
        case 3:
            printf("\nRunning Optimal...\n");
            optimal(pages, n, frame_size);

            break;
        default:
            printf("Invalid choice!\n");
            break;
    }

    return 0;
}
